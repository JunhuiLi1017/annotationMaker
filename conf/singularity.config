def checkProfileSingularity(path){
  if (new File(path).exists()){
    File directory = new File(path)
    def contents = []
    directory.eachFileRecurse (groovy.io.FileType.FILES) { file -> contents << file }
    if (!path?.trim() || contents == null || contents.size() == 0){
      println "   ### ERROR ###    The option '-profile singularity' requires the singularity images to be installed on your system. See `--singularityImagePath` for advanced usage."
      System.exit(-1)
    }
  }else{
    println "   ### ERROR ###    The option '-profile singularity' requires the singularity images to be installed on your system. See `--singularityImagePath` for advanced usage."
    System.exit(-1)
  }
}

singularity {
  enabled = true
  autoMounts = true
  runOptions = "${params.geniac.containers.singularityRunOptions}"
}

process {
  checkProfileSingularity("${params.geniac.singularityImagePath}")
  withLabel:unix { container = "${params.geniac.singularityImagePath}/unix.simg" }
  withLabel:samtools { container = "${params.geniac.singularityImagePath}/samtools.simg" }
  withLabel:picard { container = "${params.geniac.singularityImagePath}/picard.simg" }
  withLabel:ucsctools { container = "${params.geniac.singularityImagePath}/ucsctools.simg" }
  withLabel:bwamem { container = "${params.geniac.singularityImagePath}/bwamem.simg" }
  withLabel:bowtie2 { container = "${params.geniac.singularityImagePath}/bowtie2.simg" }
  withLabel:star { container = "${params.geniac.singularityImagePath}/star.simg" }
  withLabel:hisat2 { container = "${params.geniac.singularityImagePath}/hisat2.simg" }
  withLabel:kallisto { container = "${params.geniac.singularityImagePath}/kallisto.simg" }
  withLabel:salmon { container = "${params.geniac.singularityImagePath}/salmon.simg" }
  withLabel:bedtools { container = "${params.geniac.singularityImagePath}/bedtools.simg" } 
  withLabel:gffread { container = "${params.geniac.singularityImagePath}/gffread.simg" } 
  withLabel:r { container = "${params.geniac.singularityImagePath}/annotr.simg" }
}
